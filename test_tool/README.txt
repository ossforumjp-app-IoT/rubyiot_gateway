2015年12月24日

サーバの性能検証用のプログラムです。
使い方：ruby main.rb

main.rb：
　メインプログラムです。
　複数のゲートウェイを生成して、各ゲートウェイは
　スレッドで走らせてデータをサーバに投げています。

　メインプログラム全体の流れは下記の通りです。

　１．ゲートウェイ生成⇒ログイン⇒センサデバイスID取得

　２．大量データ生成

　３．各ゲートウェイをスレッド化⇒各ゲートウェイからデータ送信

　４．各ゲートウェイログアウト

　プログラム中の変数
　　gw_numはゲートウェイの数を表しています。
　　request_timesはデータをサーバに送信する回数を表しています。
　ゲートウェイ100台×2000リクエストで検証済です。


gw.rb:
　サーバのAPIを実装しています。
　各ゲートウェイ毎にセッションを生成します。
　実装して、検証済のメソッドは下記の通りです。
　　initialize
　　login
　　post_device
    sotre_data
　　log
　　logout
　他のAPIも作成はしていますが、検証済ではありません。

　各ゲートウェイはゲートウェイ毎にログファイルを生成します。
　ログファイの内容は主に、各メソッド内で使用するAPIのレスポンス時間を測定しています。
　

massive_data:
　大量データ生成のプログラムです。
　基本はrubyiot_serverのcreate_dummydata.rbをベースにさせていただいております。
　メソッドmake_dataは(5 * 24 * 60 * 60 / 3)の数だけデータを生成し、
　キューに全てを格納して、キューを返します。
　mainプログラムではキューを受け取り、各ゲートウェイはキューからポップしたデータをサーバに送信します。

register_gw.rb
　サーバにゲートウェイを登録するスクリプトです。
　ゲートウェイの数はgw_numで指定します。

